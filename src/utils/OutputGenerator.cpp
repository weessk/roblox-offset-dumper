#include "OutputGenerator.hpp"
#include <iostream>
#include <filesystem>
#include <algorithm>

std::string OutputGenerator::GetCurrentTimestamp() {
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);
    auto tm = *std::gmtime(&time_t);
    
    std::ostringstream oss;
    oss << std::put_time(&tm, "%Y-%m-%d %H:%M:%S UTC");
    return oss.str();
}

void OutputGenerator::GenerateOutput() {
    std::filesystem::create_directories("output");
    
    GenerateHeaderFile();
    GenerateTextFile();
    GenerateJsonFile();
    
    std::cout << "\n[+] files dropped:\n";
    std::cout << "    - output/offsets.hpp (c++ header for your cheat)\n";
    std::cout << "    - output/offsets.txt (human readable breakdown)\n";
    std::cout << "    - output/offsets.json (json for whatever)\n";
}

void OutputGenerator::GenerateHeaderFile() {
    std::ofstream file("output/offsets.hpp");
    
    file << "// offset dumper\n";
    file << "// generated: " << GetCurrentTimestamp() << "\n";
    file << "// roblox version: " << robloxVersion << "\n";
    file << "// byfron version: " << byfronVersion << "\n";
    file << "// generated by: nwesk\n";
    file << "// keep it lowkey fr\n\n";
    
    file << "#pragma once\n";
    file << "#include <cstdint>\n\n";
    file << "namespace offsets {\n";
    
    // sort by category
    std::sort(offsets.begin(), offsets.end(), [](const OffsetEntry& a, const OffsetEntry& b) {
        if (a.category != b.category) return a.category < b.category;
        return a.name < b.name;
    });
    
    std::string currentCategory = "";
    for (const auto& offset : offsets) {
        if (offset.category != currentCategory) {
            if (!currentCategory.empty()) file << "\n";
            file << "    // " << offset.category << " offsets\n";
            currentCategory = offset.category;
        }
        
        if (offset.found) {
            file << "    inline constexpr uintptr_t " << offset.name 
                 << " = 0x" << std::hex << std::uppercase << offset.offset << ";\n";
        } else {
            file << "    // inline constexpr uintptr_t " << offset.name 
                 << " = 0x0; // not found - " << offset.description << "\n";
        }
    }
    
    file << "}\n";
    file.close();
}

void OutputGenerator::GenerateTextFile() {
    std::ofstream file("output/offsets.txt");
    
    file << "offset dumper\n";
    file << std::string(50, '=') << "\n";
    file << "generated: " << GetCurrentTimestamp() << "\n";
    file << "roblox version: " << robloxVersion << "\n";
    file << "byfron version: " << byfronVersion << "\n";
    file << "generated by: nwesk\n";
    file << std::string(50, '=') << "\n\n";
    
    std::string currentCategory = "";
    int foundCount = 0;
    
    for (const auto& offset : offsets) {
        if (offset.category != currentCategory) {
            if (!currentCategory.empty()) file << "\n";
            file << "[" << offset.category << " offsets]\n";
            file << std::string(25, '-') << "\n";
            currentCategory = offset.category;
        }
        
        if (offset.found) {
            file << "[✓] " << std::setw(25) << std::left << offset.name 
                 << " : 0x" << std::hex << std::uppercase << std::setw(8) << std::setfill('0') << offset.offset;
            if (!offset.description.empty()) {
                file << " - " << offset.description;
            }
            file << "\n";
            foundCount++;
        } else {
            file << "[✗] " << std::setw(25) << std::left << offset.name 
                 << " : not found";
            if (!offset.description.empty()) {
                file << " - " << offset.description;
            }
            file << "\n";
        }
    }
    
    file << "\n" << std::string(50, '=') << "\n";
    file << "summary:\n";
    file << "found: " << foundCount << "/" << offsets.size() << " offsets\n";
    file << "success rate: " << (foundCount * 100 / offsets.size()) << "%\n";
    file << "keep it lowkey\n";
    file << std::string(50, '=') << "\n";
    
    file.close();
}

void OutputGenerator::GenerateJsonFile() {
    std::ofstream file("output/offsets.json");
    
    file << "{\n";
    file << "  \"metadata\": {\n";
    file << "    \"dumper\": \"offset dumper\",\n";
    file << "    \"generated\": \"" << GetCurrentTimestamp() << "\",\n";
    file << "    \"roblox_version\": \"" << robloxVersion << "\",\n";
    file << "    \"byfron_version\": \"" << byfronVersion << "\",\n";
    file << "    \"generated_by\": \"rgwq\",\n";
    file << "    \"found_count\": " << GetFoundCount() << ",\n";
    file << "    \"total_count\": " << GetTotalCount() << ",\n";
    file << "    \"success_rate\": " << (GetFoundCount() * 100 / GetTotalCount()) << ",\n";
    file << "    \"note\": \"keep it lowkey\"\n";
    file << "  },\n";
    file << "  \"offsets\": {\n";
    
    for (size_t i = 0; i < offsets.size(); ++i) {
        const auto& offset = offsets[i];
        file << "    \"" << offset.name << "\": ";
        
        if (offset.found) {
            file << "\"0x" << std::hex << std::uppercase << offset.offset << "\"";
        } else {
            file << "null";
        }
        
        if (i < offsets.size() - 1) file << ",";
        file << "\n";
    }
    
    file << "  }\n";
    file << "}\n";
    
    file.close();
}

int OutputGenerator::GetFoundCount() const {
    return std::count_if(offsets.begin(), offsets.end(), 
                        [](const OffsetEntry& e) { return e.found; });
}